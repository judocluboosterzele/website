---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

// Get all pages from the content collection
const allPages = await getCollection("pages");

// Helper function to build the navigation structure
function buildNavStructure(pages: CollectionEntry<"pages">[]) {
  const nav = [];
  const processed = new Set();

  // Debug: Log all pages to see what we have
  console.log(
    "All pages found:",
    pages.map((p) => ({ slug: p.slug, title: p.data.title }))
  );

  // Find all folders by looking for pages that contain '/'
  const folders = new Set<string>();
  pages.forEach((page) => {
    if (page.slug.includes("/")) {
      const folderPath = page.slug.split("/")[0];
      folders.add(folderPath);
    }
  });

  console.log("Folders found:", Array.from(folders));

  // Process each folder
  folders.forEach((folderName) => {
    // Look for folder index file first
    const indexFile = pages.find((page) => page.slug === `${folderName}/index`);
    // Look for standalone page with same name as folder
    const standaloneFile = pages.find((page) => page.slug === folderName);

    // Find all files in this folder (excluding the index)
    const folderFiles = pages.filter(
      (page) =>
        page.slug.startsWith(`${folderName}/`) &&
        page.slug !== `${folderName}/index` &&
        page.slug.split("/").length === 2 // Only direct children
    );

    console.log(`Folder "${folderName}":`, {
      hasIndex: !!indexFile,
      hasStandalone: !!standaloneFile,
      indexTitle: indexFile?.data.title,
      standaloneTitle: standaloneFile?.data.title,
      children: folderFiles.map((f) => ({ slug: f.slug, title: f.data.title })),
    });

    // Determine which file to use for the folder title and settings
    const titleFile = indexFile || standaloneFile;

    if (titleFile) {
      // Mark the files as processed so they don't appear twice
      if (indexFile) processed.add(indexFile.slug);
      if (standaloneFile) processed.add(standaloneFile.slug);

      // Sort folder files
      if (titleFile.data.navOrder) {
        folderFiles.sort((a, b) => {
          const aSlug = a.slug.replace(`${folderName}/`, "");
          const bSlug = b.slug.replace(`${folderName}/`, "");
          const aIndex = titleFile.data.navOrder.indexOf(aSlug);
          const bIndex = titleFile.data.navOrder.indexOf(bSlug);

          if (aIndex === -1 && bIndex === -1)
            return (a.data.order || 999) - (b.data.order || 999);
          if (aIndex === -1) return 1;
          if (bIndex === -1) return -1;
          return aIndex - bIndex;
        });
      } else {
        folderFiles.sort(
          (a, b) => (a.data.order || 999) - (b.data.order || 999)
        );
      }

      nav.push({
        title: titleFile.data.title,
        slug: folderName,
        hasChildren: folderFiles.length > 0,
        children: folderFiles.map((file) => ({
          title: file.data.title,
          slug: file.slug,
        })),
      });

      // Mark all folder files as processed
      folderFiles.forEach((file) => processed.add(file.slug));
    } else if (folderFiles.length > 0) {
      // No index or standalone file, but we have files in the folder
      // Use the folder name as title and sort files by order
      folderFiles.sort((a, b) => (a.data.order || 999) - (b.data.order || 999));

      nav.push({
        title: folderName.charAt(0).toUpperCase() + folderName.slice(1), // Capitalize folder name
        slug: folderName,
        hasChildren: folderFiles.length > 0,
        children: folderFiles.map((file) => ({
          title: file.data.title,
          slug: file.slug,
        })),
      });

      // Mark all folder files as processed
      folderFiles.forEach((file) => processed.add(file.slug));
    }
  });

  // Add remaining top-level pages (not in folders and not processed yet)
  const topLevelPages = pages.filter(
    (page) =>
      !page.slug.includes("/") &&
      page.slug !== "index" &&
      !processed.has(page.slug)
  );

  topLevelPages.sort((a, b) => (a.data.order || 999) - (b.data.order || 999));

  // Add top-level pages to navigation
  topLevelPages.forEach((page) => {
    nav.push({
      title: page.data.title,
      slug: page.slug,
      hasChildren: false,
      children: [],
    });
  });

  // Final sorting using root index navOrder if available
  const rootIndex = pages.find((p) => p.slug === "index");
  if (rootIndex?.data.navOrder) {
    nav.sort((a, b) => {
      const aIndex = rootIndex.data.navOrder.indexOf(a.slug);
      const bIndex = rootIndex.data.navOrder.indexOf(b.slug);

      if (aIndex === -1 && bIndex === -1) return 0;
      if (aIndex === -1) return 1;
      if (bIndex === -1) return -1;
      return aIndex - bIndex;
    });
  } else {
    // Sort by order property
    nav.sort((a, b) => {
      const aPage = pages.find(
        (p) => p.slug === a.slug || p.slug === a.slug + "/index"
      );
      const bPage = pages.find(
        (p) => p.slug === b.slug || p.slug === b.slug + "/index"
      );
      return (aPage?.data.order || 999) - (bPage?.data.order || 999);
    });
  }

  return nav;
}

const navItems = buildNavStructure(allPages);

// Debug: Log the navigation structure
console.log("Navigation items:", JSON.stringify(navItems, null, 2));
---

<nav class="navbar">
  <div class="navbar-container">
    <!-- Logo/Brand -->
    <div class="navbar-brand">
      <a href="/" class="brand-link"> Judo Club Oosterzele </a>
    </div>

    <!-- Mobile menu button -->
    <button
      class="mobile-menu-button"
      id="mobile-menu-button"
      aria-label="Toggle menu"
    >
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>

    <!-- Navigation items -->
    <div class="navbar-menu" id="navbar-menu">
      <ul class="navbar-nav">
        {
          navItems.map((item) => (
            <li
              class="nav-item"
              class:list={[{ "has-dropdown": item.hasChildren }]}
            >
              <a href={`/${item.slug}`} class="nav-link">
                {item.title}
                {item.hasChildren && <span class="dropdown-arrow">â–¼</span>}
              </a>
              {item.hasChildren && (
                <ul class="dropdown-menu">
                  {item.children.map((child) => (
                    <li class="dropdown-item">
                      <a href={`/${child.slug}`} class="dropdown-link">
                        {child.title}
                      </a>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</nav>

<style>
  .navbar {
    background: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 0;
    z-index: 1000;
  }

  .navbar-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 70px;
  }

  .navbar-brand {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .brand-link {
    color: #2c5aa0;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .brand-link:hover {
    color: #1e3f73;
  }

  .mobile-menu-button {
    display: none;
    flex-direction: column;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .hamburger-line {
    width: 25px;
    height: 3px;
    background-color: #2c5aa0;
    margin: 3px 0;
    transition: 0.3s;
  }

  .navbar-menu {
    display: flex;
  }

  .navbar-nav {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 2rem;
  }

  .nav-item {
    position: relative;
  }

  .nav-link {
    color: #333;
    text-decoration: none;
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: color 0.3s ease;
    white-space: nowrap;
  }

  .nav-link:hover {
    color: #2c5aa0;
  }

  .dropdown-arrow {
    font-size: 0.8rem;
    transition: transform 0.3s ease;
  }

  /* Fix dropdown functionality - improved hover detection */
  .has-dropdown {
    position: relative;
  }

  .dropdown-menu {
    position: absolute;
    top: calc(100% + 5px);
    left: 0;
    background: #fff;
    min-width: 220px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    border-radius: 8px;
    border: 1px solid #e5e5e5;
    list-style: none;
    padding: 0.75rem 0;
    margin: 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-15px);
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
    z-index: 1000;
  }

  /* Hover states for dropdown */
  .has-dropdown:hover .dropdown-menu,
  .has-dropdown:focus-within .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    pointer-events: auto;
  }

  .has-dropdown:hover .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dropdown-item {
    margin: 0;
  }

  .dropdown-link {
    display: block;
    padding: 0.75rem 1.5rem;
    color: #333;
    text-decoration: none;
    transition: all 0.2s ease;
    border-radius: 4px;
    margin: 0 0.5rem;
    font-size: 0.95rem;
  }

  .dropdown-link:hover {
    background-color: #f1f5f9;
    color: #2c5aa0;
  }

  /* Ensure dropdown stays visible when hovering over dropdown items */
  .dropdown-menu:hover {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    pointer-events: auto;
  }

  /* Add small triangle indicator */
  .has-dropdown::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid #fff;
    opacity: 0;
    transition: opacity 0.25s ease;
    z-index: 1001;
  }

  .has-dropdown:hover::after {
    opacity: 1;
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .mobile-menu-button {
      display: flex;
    }

    .navbar-menu {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: #fff;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      border-radius: 0 0 8px 8px;
    }

    .navbar-menu.active {
      display: block;
    }

    .navbar-nav {
      flex-direction: column;
      gap: 0;
      padding: 1rem 0;
    }

    .nav-link {
      padding: 1rem 1.5rem;
      border-bottom: 1px solid #eee;
    }

    .dropdown-menu {
      position: static;
      opacity: 1;
      visibility: visible;
      transform: none;
      box-shadow: none;
      border-radius: 0;
      border: none;
      background: #f8f9fa;
      margin: 0;
      pointer-events: auto;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease;
    }

    .has-dropdown.mobile-expanded .dropdown-menu {
      max-height: 500px;
    }

    .dropdown-link {
      padding: 0.75rem 2rem;
      font-size: 0.9rem;
      margin: 0;
      border-radius: 0;
    }

    /* Mobile dropdown toggle */
    .nav-item.has-dropdown > .nav-link {
      cursor: pointer;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const navbarMenu = document.getElementById("navbar-menu");

    if (mobileMenuButton && navbarMenu) {
      // Mobile menu toggle
      mobileMenuButton.addEventListener("click", () => {
        navbarMenu.classList.toggle("active");
      });

      // Close mobile menu when clicking outside
      document.addEventListener("click", (e) => {
        if (
          !mobileMenuButton.contains(e.target) &&
          !navbarMenu.contains(e.target)
        ) {
          navbarMenu.classList.remove("active");
        }
      });
    }

    // Mobile dropdown functionality
    const dropdownItems = document.querySelectorAll(".has-dropdown");

    dropdownItems.forEach((item) => {
      const link = item.querySelector(".nav-link");

      // Only add click handler on mobile
      if (link && window.innerWidth <= 768) {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          item.classList.toggle("mobile-expanded");
        });
      }
    });

    // Handle window resize
    window.addEventListener("resize", () => {
      if (window.innerWidth > 768) {
        // Remove mobile classes on desktop
        dropdownItems.forEach((item) => {
          item.classList.remove("mobile-expanded");
        });
      }
    });
  });
</script>
