---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import "../styles/navbar.css";

const allPages = await getCollection("pages");

function buildNavStructure(pages: CollectionEntry<"pages">[]) {
  type NavItem = {
    title: string;
    slug: string;
    hasChildren: boolean;
    children: { title: string; slug: string }[];
  };

  const nav: NavItem[] = [];
  const processed = new Set<string>();

  const folders = new Set<string>();
  pages.forEach((page) => {
    if (page.slug.includes("/")) {
      folders.add(page.slug.split("/")[0]);
    }
  });

  folders.forEach((folderName) => {
    const indexFile = pages.find((page) => page.slug === `${folderName}/index`);
    const standaloneFile = pages.find((page) => page.slug === folderName);
    const folderFiles = pages.filter(
      (page) =>
        page.slug.startsWith(`${folderName}/`) &&
        page.slug !== `${folderName}/index` &&
        page.slug.split("/").length === 2
    );

    const titleFile = indexFile || standaloneFile;

    if (titleFile) {
      if (indexFile) processed.add(indexFile.slug);
      if (standaloneFile) processed.add(standaloneFile.slug);

      if (titleFile.data?.navOrder) {
        folderFiles.sort((a, b) => {
          const aSlug = a.slug.replace(`${folderName}/`, "");
          const bSlug = b.slug.replace(`${folderName}/`, "");
          const aIndex = titleFile.data.navOrder?.indexOf(aSlug) ?? -1;
          const bIndex = titleFile.data.navOrder?.indexOf(bSlug) ?? -1;

          if (aIndex === -1 && bIndex === -1)
            return (a.data.order ?? 999) - (b.data.order ?? 999);
          if (aIndex === -1) return 1;
          if (bIndex === -1) return -1;
          return aIndex - bIndex;
        });
      } else {
        folderFiles.sort(
          (a, b) => (a.data.order ?? 999) - (b.data.order ?? 999)
        );
      }

      nav.push({
        title: titleFile.data.title,
        slug: folderName,
        hasChildren: folderFiles.length > 0,
        children: folderFiles.map((file) => ({
          title: file.data.title,
          slug: file.slug,
        })),
      });

      folderFiles.forEach((file) => processed.add(file.slug));
    }
  });

  const topLevelPages = pages.filter(
    (page) =>
      !page.slug.includes("/") &&
      page.slug !== "index" &&
      !processed.has(page.slug)
  );

  topLevelPages.sort((a, b) => (a.data.order ?? 999) - (b.data.order ?? 999));

  topLevelPages.forEach((page) => {
    nav.push({
      title: page.data.title,
      slug: page.slug,
      hasChildren: false,
      children: [],
    });
  });

  const rootIndex = pages.find((p) => p.slug === "index");
  if (rootIndex?.data?.navOrder) {
    nav.sort((a, b) => {
      const aIndex = rootIndex.data.navOrder?.indexOf(a.slug) ?? -1;
      const bIndex = rootIndex.data.navOrder?.indexOf(b.slug) ?? -1;
      if (aIndex === -1 && bIndex === -1) return 0;
      if (aIndex === -1) return 1;
      if (bIndex === -1) return -1;
      return aIndex - bIndex;
    });
  } else {
    nav.sort((a, b) => {
      const aPage = pages.find(
        (p) => p.slug === a.slug || p.slug === a.slug + "/index"
      );
      const bPage = pages.find(
        (p) => p.slug === b.slug || p.slug === b.slug + "/index"
      );
      return (aPage?.data.order ?? 999) - (bPage?.data.order ?? 999);
    });
  }

  return nav;
}

const navItems = buildNavStructure(allPages);
---

<nav class="navbar">
  <div class="navbar-container">
    <div class="navbar-brand">
      <a href="/" class="brand-link">
        <img src="/favicon.svg" alt="Judoclub Oosterzele Logo" class="logo" />
        Judoclub Oosterzele
      </a>
    </div>

    <button
      class="mobile-menu-button"
      id="mobile-menu-button"
      aria-label="Toggle menu"
    >
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>

    <div class="navbar-menu" id="navbar-menu">
      <ul class="navbar-nav">
        {
          navItems.map((item) => (
            <li class:list={["nav-item", { "has-dropdown": item.hasChildren }]}>
              <div class="nav-item-row">
                <a href={`/${item.slug}`} class="nav-link">
                  {item.title}
                </a>
                {item.hasChildren && (
                  <button class="dropdown-arrow" aria-label="Toggle submenu">
                    <svg
                      width="12"
                      height="12"
                      viewBox="0 0 12 12"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M3 4.5L6 7.5L9 4.5"
                        stroke="currentColor"
                        stroke-width="1.5"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </button>
                )}
              </div>
              {item.hasChildren && (
                <ul class="dropdown-menu">
                  {item.children.map((child) => (
                    <li class="dropdown-item">
                      <a href={`/${child.slug}`} class="dropdown-link">
                        {child.title}
                      </a>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</nav>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const navbarMenu = document.getElementById("navbar-menu");
    const dropdownArrows = document.querySelectorAll(".dropdown-arrow");

    if (mobileMenuButton && navbarMenu) {
      mobileMenuButton.addEventListener("click", () => {
        mobileMenuButton.classList.toggle("open");
        navbarMenu.classList.toggle("active");
      });

      document.addEventListener("click", (e) => {
        const target = e.target as Node;
        if (
          !mobileMenuButton.contains(target) &&
          !navbarMenu.contains(target)
        ) {
          mobileMenuButton.classList.remove("open");
          navbarMenu.classList.remove("active");
        }
      });
    }

    // Handle dropdown arrow clicks on mobile
    dropdownArrows.forEach((arrow) => {
      arrow.addEventListener("click", (e) => {
        e.stopPropagation();
        e.preventDefault();
        const parent = (e.currentTarget as HTMLElement).closest(
          ".has-dropdown"
        );
        if (parent) {
          parent.classList.toggle("mobile-expanded");
        }
      });
    });
  });
</script>
